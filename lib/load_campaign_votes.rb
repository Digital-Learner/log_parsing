require 'csv'
require 'active_record'
require_relative '../app/models/campaign'

module LogParser
  class LoadCampaignVotes

    DELIMITED_KEYS = %w(Campaign Validity CONN MSISDN GUID Shortcode)
    SQLITE3_INSERT_VOTE_STMT = "INSERT INTO votes (vote_date, campaign, validity, choice) VALUES ("

    def initialize
      @errors = []
      @insert = []
      @campaigns = []
    end

    def main
      get_existing_campaigns
      readfile("data/three_votes.txt")
      # only display errors if there are entries in the 'tmp/errors.txt' file
      campaigns
      errors
      write_files("insert_to_votes.txt", 'campaign votes')
      write_files("errors.txt", 'error')
    end


    private

    def get_existing_campaigns
      @existing_campaigns = Campaign.all
    end

    def readfile(filename)
      CSV.foreach(File.path(filename), encoding: "iso-8859-1:UTF-8") do |row|
        if (row[0].match /^VOTE \d{10,10} /)
          # create array of data to work with
          data = row[0].split
          campaign = campaign(data)
          campaign = campaign.is_a?(String) ? "'#{campaign}'" : campaign
          choice = choice(data)
          if choice.match(/Choice|error/) || choice.nil?
            @errors << row[0]
          else
            @insert << "#{SQLITE3_INSERT_VOTE_STMT} #{voted_at(data)}, #{campaign}, '#{validity(data)}', '#{choice}');"
          end
        end
      end
    end    

    def campaign(data)
      # array position 2
      campaign_code = data[2].split(":").last
      @campaigns << campaign_code unless @campaigns.include?(campaign_code)
      get_campaign_short_code(campaign_code)
    end

    def get_campaign_short_code(campaign_code)
      # may be best to uncomplicate this and just collect ids and short-codes
      # in seperate arrays, then as indexes at same position in ruby 1.9+
      # find the short-codes index then index into the array of ids to get the id

      short_code = @existing_campaigns.detect {|campaign| campaign.code == campaign_code }
      short_code.nil? ? create_campaign(campaign_code) : short_code.id
    end

    def create_campaign(campaign_code)
      puts "Adding new campaign for vote [#{campaign_code}]"
      new_campaign = Campaign.create(name: "Autogenerated - #{campaign_code}", code: campaign_code, description: 'Not Available')
      @existing_campaigns << new_campaign
      new_campaign.id
    end

    def voted_at(data)
      # array position 1
      data[1]
    end

    def validity(data)
      # array position 3
      data[3].split(":").last
    end

    def choice(data)
      # array position 4
      choice = data[4].split(":")
      key = choice.first
      DELIMITED_KEYS.include?(key) ? "error" : choice.last
    end    

    def campaigns
      puts "\n\nThe following campaigns have data for loading"
      @campaigns.each do |campaign| 
        puts campaign
      end
    end

    def errors
      puts "\n\nThe following errors were encountered. Please review"
      @errors.each {|error| puts error }
    end

    def write_files(file, type)
      f = File.open("tmp/#{file}", 'w')
      f.puts "# Output Type: #{type}"
      if type == 'error'
        f.puts @errors
      else
        f.puts @insert
      end
      f.close
    end
  end
end
